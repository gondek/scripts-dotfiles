#!/usr/bin/env python3
#pylint: disable=C0103, W0703, C0301
"""Simple script to backup a user's own and starred GitHub repos"""

import sys
import json
import shutil
import os.path
import subprocess
import urllib.request
from datetime import datetime

DEFAULT_USERNAME = 'gondek'
DEFAULT_LOCATION = '~/Desktop'
TEMP_DIR_SUFFIX = 'github-backup' + datetime.now().strftime('%S%f')

def get_github_json(user_agent, endpoint):
    """Get the response of a GitHub API endpoint as JSON"""
    url = 'https://api.github.com/{}'.format(endpoint)
    request = urllib.request.Request(url)
    request.add_header('user-agent', user_agent)
    request.add_header('accept', 'application/vnd.github.v3+json')
    try:
        response = urllib.request.urlopen(request)
        content = response.read()
        response.close()
        return json.loads(content.decode('utf-8'))
    except Exception as e:
        print('Error getting JSON from: {}\n{}'.format(url, str(e)))
        sys.exit(1)

def get_user_repos(username):
    """Get a user's own and starred repos"""
    print('Retrieving {}\'s repos (starred, owner, watching)'.format(username))
    starred = get_github_json(username, 'users/{}/starred'.format(username))
    user_repos = get_github_json(username, 'users/{}/repos'.format(username))
    watched = get_github_json(username, 'users/{}/subscriptions'.format(username))
    all_repos = {}
    # avoid duplicates by indexing by key
    for repo in starred+user_repos+watched:
        all_repos[repo['id']] = repo
    return list(all_repos.values())

def clone_repos_to_directory(repos, directory):
    """Clone all of the GitHub repos into a directory"""
    for repo in repos:
        print('Cloning {}'.format(repo['full_name']))
        subprocess.check_call(
            'git clone {} {}'.format(repo['clone_url'], resolve_path(directory, repo['full_name'].replace('/', '-'))),
            shell=True, stderr=subprocess.STDOUT, stdout=subprocess.DEVNULL
        )

def zip_directory(directory, filename):
    """Zip all the contents of a directory into the specified file"""
    print('Zipping {} into {}'.format(directory, filename))
    shutil.make_archive(filename.replace('.zip', ''), 'zip', directory)

def remove_directory(directory):
    """Remove the specified directory"""
    print('Removing {}'.format(directory))
    shutil.rmtree(directory)

def resolve_path(path, suffix=None):
    """Expand a file system path, with an optional suffix"""
    if suffix:
        path = os.path.join(path, suffix)
    return os.path.abspath(os.path.expanduser(path))

def verify_options(username, directory, tmp_directory, zip_file):
    """Display the script settings to the user and ask to continue"""
    print('Using username:\n    {}'.format(username))
    print('Using directory:\n    {}'.format(directory))
    print('Will create/use/destroy temp directory:\n {}'.format(tmp_directory))
    print('Will zip all repos into:\n    {}'.format(zip_file))
    return input("Type 'y' to continue or anything else to quit: ").lower() == 'y'

def main():
    """Show usage, parse options, and run script"""
    print('Usage: {} <username> <directory>\n'.format(sys.argv[0]))

    args = dict(enumerate(sys.argv))
    username = args.get(1, DEFAULT_USERNAME)
    directory = resolve_path(args.get(2, DEFAULT_LOCATION))
    tmp_directory = resolve_path(directory, TEMP_DIR_SUFFIX)
    zip_file = resolve_path(directory, '{}.zip'.format(datetime.now().strftime('%Y-%m-%d')))

    if verify_options(username, directory, tmp_directory, zip_file):
        print()
        clone_repos_to_directory(get_user_repos(username), tmp_directory)
        zip_directory(tmp_directory, zip_file)
        remove_directory(tmp_directory)

if __name__ == "__main__":
    main()
