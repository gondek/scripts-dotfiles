#!/usr/bin/env node

const home = process.env.HOME
const axios = require(home + '/.n/lib/node_modules/axios').default
const fs = require('fs')

const wealthSimpleHost = 'https://trade-service.wealthsimple.com'

function log (message) {
  console.log(`[${(new Date()).toLocaleString()}] ${message}`)
}

function exitWithError (message, moreDetails) {
  if (moreDetails) console.error(moreDetails + '\n')
  console.error(message)
  process.exit(1)
}

async function getAuthToken (credentials) {
  return axios.post(`${wealthSimpleHost}/auth/login`, credentials)
    .then((response) => {
      return response.headers['x-access-token']
    })
    .catch((e) => exitWithError('Could not authenticate', e))
}

async function getPortfolioData (token, type, dataPath) {
  return axios.get(`${wealthSimpleHost}/${type}`, { headers: { Authorization: token } })
    .then((response) => {
      const portfolioData = dataPath ? response.data[dataPath] : response.data
      return portfolioData
    })
    .catch((e) => exitWithError('getPortfolioData failed for getPortfolioData @ ' + type, e))
}

async function getBaseData (token) {
  const orders = getPortfolioData(token, 'orders', 'results')
  const positions = getPortfolioData(token, 'account/positions', 'results')
  const forex = getPortfolioData(token, 'forex')

  return Promise.all([orders, positions, forex])
    .then(data => ({
      orders: data[0],
      positions: data[1],
      forex: data[2]
    }))
    .catch((e) => exitWithError('getBaseData failed', e))
}

async function getStocksData (token, stockIds) {
  const maxStockRequests = 2
  const stocksData = {}

  stockIds = [...new Set(stockIds)] // remove duplicates

  while (stockIds.length > 0) {
    log(` - ${stockIds.length} remaining`)
    const currentStockIds = stockIds.splice(0, maxStockRequests)
    const stockPromises = currentStockIds.map(id => getPortfolioData(token, `securities/${id}`))
    await Promise.all(stockPromises)
      .then(stocks => stocks.forEach(stock => { stocksData[stock.id] = stock }))
      .catch((e) => exitWithError('getStocksData failed', e))
  }

  return stocksData
}

function toCad (currencyName, currencyAmount, usdToCad) {
  if (currencyName === 'CAD') {
    return currencyAmount
  }
  if (currencyName === 'USD') {
    return currencyAmount * usdToCad
  }
  throw new Error(`Unknown currency: ${currencyName}`)
}

function getAccountName (rawName) {
  if (rawName.startsWith('non-registered-')) {
    return 'Cash'
  } else if (rawName.startsWith('tfsa-')) {
    return 'TFSA'
  } else {
    return `Unknown: ${rawName}`
  }
}

function combineAndDecoratePortfolioData (basePortfolioData, stocksData) {
  const portfolioData = { ...basePortfolioData, stocks: stocksData }
  const usdToCad = portfolioData.forex.USD.fx_rate

  let totalMarketValueCadEntirePortfolio = 0
  const totalMarketValueCadByAccount = {}

  portfolioData.positions.forEach(position => {
    const rawBookValue = position.market_book_value
    const rawQuote = position.quote
    const shareCount = position.quantity

    const fundamentals = (stocksData[position.id] || {}).fundamentals || {}
    const accountName = getAccountName(position.account_id)
    const stockPriceCad = toCad(rawQuote.currency, Number(rawQuote.amount), usdToCad)
    const bookValueCad = toCad(rawBookValue.currency, rawBookValue.amount, usdToCad)
    const marketValueCad = stockPriceCad * shareCount
    const dividendYield = fundamentals.yield
    totalMarketValueCadEntirePortfolio += marketValueCad
    totalMarketValueCadByAccount[accountName] = (totalMarketValueCadByAccount[accountName] || 0) + marketValueCad

    position.account = accountName
    position.fundamentals = fundamentals
    position.marketPriceCad = stockPriceCad
    position.marketValueCad = marketValueCad
    position.bookValueCad = bookValueCad
    position.bookPriceCad = bookValueCad / shareCount
    position.gainCad = marketValueCad - bookValueCad
    position.gainPercent = 100 * position.gainCad / bookValueCad
    position.yieldPercent = dividendYield * 100
    position.yearlyDividendCad = dividendYield * marketValueCad

    const isUsdStock = position.currency === 'USD'
    if (isUsdStock) {
      position.marketPriceUsd = stockPriceCad / usdToCad
      position.marketValueUsd = marketValueCad / usdToCad
      position.bookValueUsd = bookValueCad / usdToCad
      position.bookPriceUsd = position.bookPriceCad / usdToCad
      position.gainUsd = position.marketValueUsd - position.bookValueUsd
      position.yearlyDividendUsd = dividendYield * position.marketValueUsd
    }
  })

  portfolioData.positions.forEach(position => {
    position.percentOfEntirePortfolio = 100 * position.marketValueCad / totalMarketValueCadEntirePortfolio
    position.percentOfAccount = 100 * position.marketValueCad / totalMarketValueCadByAccount[position.account]
  })

  return portfolioData
}

async function main () {
  if (process.argv.length !== 6) {
    exitWithError(`Usage: ${process.argv[0]} ${process.argv[1]} <email> <password> <file> <otp>`)
  }

  const destinationFile = process.argv[4]
  const credentials = {
    email: process.argv[2],
    password: process.argv[3],
    otp: process.argv[5]
  }

  log('Fetching credentials')
  const token = await getAuthToken(credentials)
  log('Fetching base portfolio data')
  const basePortfolioData = await getBaseData(token)
  log('Fetching stock data')
  const stockData = await getStocksData(token, basePortfolioData.positions.map(stockPosition => stockPosition.id))

  log('Saving portfolio data')
  const fullPortfolioData = combineAndDecoratePortfolioData(basePortfolioData, stockData)
  const portfolioFileContent = `this.portfolio = ${JSON.stringify(fullPortfolioData, null, 4)};`
  fs.writeFileSync(require('path').resolve(process.cwd(), destinationFile), portfolioFileContent)
  log('Done!')
}

main()
